<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WinCopies.GUI.IO"
    xmlns:controls="clr-namespace:WinCopies.GUI.Controls;assembly=WinCopies.GUI.Controls"
    xmlns:converters="clr-namespace:WinCopies.Util.Data;assembly=WinCopies.Util.Desktop"
    xmlns:util="clr-namespace:WinCopies.Util;assembly=WinCopies.Util.Desktop"
    xmlns:icons="clr-namespace:WinCopies.GUI.Icons.Properties;assembly=WinCopies.GUI.Icons"
    xmlns:commands="clr-namespace:WinCopies.Util.Commands;assembly=WinCopies.Util.Desktop"
    xmlns:data="clr-namespace:WinCopies.Util.Data;assembly=WinCopies.Util.Desktop"
    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

            <!--Data converters-->

            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <data:IconToImageSourceConverter x:Key="IconToImageSourceConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <ControlTemplate x:Key="ExplorerControlTemplate" TargetType="{x:Type local:ExplorerControl}">
        <!--<DataTemplate DataType="{x:Type local:BrowsableObjectInfo}">-->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <TextBox>
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="Text" Value="{Binding Path, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true">
                                    <Setter Property="Text" Value="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <Button Grid.Column="1" Command="{TemplateBinding GoButtonCommand}" CommandParameter="{TemplateBinding GoButtonCommandParameter}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}">
                    <Button.Content>
                        <Image Source="{Binding Source={x:Static icons:Resources.accept}, Converter={StaticResource IconToImageSourceConverter}}" />
                    </Button.Content>
                </Button>
            </Grid>
            <local:ExplorerControlTreeView Grid.Row="1" Style="{TemplateBinding TreeViewStyle}">
                <!--<TreeView.ItemTemplate>
                    <DataTemplate DataType="{x:Type local:BrowsableObjectInfoViewModel}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Image Source="{Binding MediumBitmapSource}" />
                            <controls:Label Content="{Binding Name}" />
                        </Grid>
                    </DataTemplate>
                </TreeView.ItemTemplate>-->
            </local:ExplorerControlTreeView>
            <ListView Grid.Column="1" Grid.Row="1" Style="{TemplateBinding ListViewStyle}">
                <!--<Style TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">-->
                <!--<Setter Property="ItemTemplate" Value="{StaticResource ExplorerControlSizeThreeListViewItemTemplate}" />-->
                <!--<Setter Property="ItemsPanel">

                                </Setter>-->
                <!--<Style.Triggers>
                                    <DataTrigger Binding="{Binding ViewStyle, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Static local:ViewStyle.SizeOne}">
                                        <Setter Property="ItemTemplate" Value="{StaticResource ExplorerControlSizeOneListViewItemTemplate}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ViewStyle, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Static local:ViewStyle.SizeTwo}">
                                        <Setter Property="ItemTemplate" Value="{StaticResource ExplorerControlSizeTwoListViewItemTemplate}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ViewStyle, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Static local:ViewStyle.SizeFour}">
                                        <Setter Property="ItemTemplate" Value="{StaticResource ExplorerControlSizeFourListViewItemTemplate}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ViewStyle, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Static local:ViewStyle.Tiles}">
                                        <Setter Property="ItemTemplate" Value="{StaticResource ExplorerControlSizeOneListViewItemTemplate}" />
                                    </DataTrigger>
                                </Style.Triggers>-->
                <!--</Style>-->
            </ListView>
            <GridSplitter Grid.Column="1" Grid.Row="1" Width="5" HorizontalAlignment="Left" />
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type local:ExplorerControl}">
        <Setter Property="Template" Value="{StaticResource ExplorerControlTemplate}" />
        <!--<Setter.Value>-->
        <!--</DataTemplate>-->
        <!--</Setter.Value>-->
        <!--</Setter>-->
    </Style>

    <DataTemplate x:Key="TreeViewItemHeaderDataTemplate" DataType="{x:Type local:IBrowsableObjectInfoViewModel}" x:Shared="false">
        <local:ExplorerControlTreeViewItemHeader>
            <local:ExplorerControlTreeViewItemHeader.Style>
                <Style TargetType="{x:Type local:ExplorerControlTreeViewItemHeader}" >
                    <Setter Property="Icon" Value="{Binding SmallBitmapSource}" />
                    <Setter Property="ItemName" Value="{Binding LocalizedName}" />
                </Style>
            </local:ExplorerControlTreeViewItemHeader.Style>
        </local:ExplorerControlTreeViewItemHeader>
    </DataTemplate>

    <DataTemplate x:Key="ListViewItemContentDataTemplate" DataType="{x:Type local:IBrowsableObjectInfoViewModel}" x:Shared="false">
        <local:ExplorerControlListViewItemContent Command="{Binding DataContext.ItemClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControl}}}" CommandParameter="{Binding}">
            <local:ExplorerControlListViewItemContent.Style>
                <Style TargetType="{x:Type local:ExplorerControlListViewItemContent}" >
                    <Setter Property="SmallIcon" Value="{Binding SmallBitmapSource}" />
                    <Setter Property="LargeIcon" Value="{Binding LargeBitmapSource}" />
                    <Setter Property="ItemName" Value="{Binding LocalizedName}" />
                    <Setter Property="HasTransparency" Value="{Binding IsSpecialItem}" />
                    <Setter Property="IsCheckBoxVisible" Value="{Binding IsCheckBoxVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControl}}}" />
                </Style>
            </local:ExplorerControlListViewItemContent.Style>
        </local:ExplorerControlListViewItemContent>
    </DataTemplate>

    <Style TargetType="{x:Type local:ExplorerControlTreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ExplorerControlTreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
                        <Button Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Button>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExplorerControlTreeViewStyle" TargetType="{x:Type local:ExplorerControlTreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="ItemsSource" Value="{Binding TreeViewItems}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type local:ExplorerControlTreeViewItem}" BasedOn="{StaticResource {x:Type local:ExplorerControlTreeViewItem}}">
                    <Setter Property="HeaderTemplate" Value="{StaticResource TreeViewItemHeaderDataTemplate}" />
                    <Setter Property="ItemsSource" Value="{Binding Items}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                    <Setter Property="Command" Value="{Binding DataContext.ItemClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControl}}}" />
                    <Setter Property="CommandParameter" Value="{Binding}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExplorerControlListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="ItemsSource" Value="{Binding Path.Items}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="SelectionMode" Value="{Binding SelectionMode}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                    <Setter Property="ContentTemplate" Value="{StaticResource ListViewItemContentDataTemplate}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type local:IExplorerControlBrowsableObjectInfoViewModel}" x:Shared="false">
        <local:ExplorerControl Path="{Binding Path.Path}" Text="{Binding Text, Mode=TwoWay}" TreeViewStyle="{StaticResource ExplorerControlTreeViewStyle}" ListViewStyle="{StaticResource ExplorerControlListViewStyle}" GoButtonCommand="{x:Static local:ExplorerControlBrowsableObjectInfoViewModel.GoCommand}" GoButtonCommandParameter="{Binding}" IsCheckBoxVisible="{Binding IsCheckBoxVisible}" />
    </DataTemplate>

    <Style TargetType="{x:Type local:ExplorerControlTreeViewItemHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ExplorerControlTreeViewItemHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Image Source="{TemplateBinding Icon}" />
                        <controls:Label Grid.Column="1" Content="{TemplateBinding ItemName}" Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<DataTemplate x:Key="ExplorerControlSizeOneListViewItemTemplate">
        <local:ExplorerControlListViewItem>
            <StackPanel Orientation="Horizontal" Height="16" Width="300" >
                <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Image Source="{Binding SmallIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="16" Style="{StaticResource ExplorerControlImageStyle}" />
                -->
    <!--, Converter={local:ImageSourceConverter}}-->
    <!--
                <TextBlock TextWrapping="Wrap" Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
            </StackPanel>
        </local:ExplorerControlListViewItem>
    </DataTemplate>

    <DataTemplate x:Key="ExplorerControlSizeTwoListViewItemContentTemplate">
        <Grid Width="75" >
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="48" />
                <RowDefinition MaxHeight="32" />
            </Grid.RowDefinitions>
            <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            <Image Grid.Row="1" Source="{Binding MediumIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" VerticalAlignment="Bottom" Style="{StaticResource ExplorerControlImageStyle}" />
            <TextBlock Grid.Row="2" TextWrapping="Wrap" TextAlignment="Center" VerticalAlignment="Top" Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
        </Grid>
    </DataTemplate>-->

    <!-- todo: merged style to avoid the ancestor reference in binding?-->
    <Style x:Key="ExplorerControlListViewItemTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Text" Value="{Binding ItemName, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="ToolTip" Value="{Binding ItemName, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding UnderliningMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Value="{x:Static controls:LinkUnderliningMode.AlwaysUnderline}" >
                <Setter Property="TextDecorations" >
                    <Setter.Value>
                        <TextDecorationCollection>
                            <!--todo: to put in style resources-->
                            <TextDecoration Location="Underline" />
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding UnderliningMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Value="{x:Static controls:LinkUnderliningMode.UnderlineWhenMouseOverOrFocused}" />
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                </MultiDataTrigger.Conditions>

                <Setter Property="TextDecorations" >
                    <Setter.Value>
                        <TextDecorationCollection>
                            <!--todo: to put in style resources-->
                            <TextDecoration Location="Underline" />
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding UnderliningMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Value="{x:Static controls:LinkUnderliningMode.UnderlineWhenMouseOverOrFocused}" />
                    <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                </MultiDataTrigger.Conditions>

                <Setter Property="TextDecorations" >
                    <Setter.Value>
                        <TextDecorationCollection>
                            <!--todo: to put in style resources-->
                            <TextDecoration Location="Underline" />
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding UnderliningMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Value="{x:Static controls:LinkUnderliningMode.UnderlineWhenNotMouseOverNorFocused}" />
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="false" />
                    <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Mode=Self}}" Value="false" />
                </MultiDataTrigger.Conditions>

                <Setter Property="TextDecorations" >
                    <Setter.Value>
                        <TextDecorationCollection>
                            <!--todo: to put in style resources-->
                            <TextDecoration Location="Underline" />
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExplorerControlImageStyle" TargetType="Image">
        <!--<Setter Property="Opacity">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource FileSystemInfoAttributesToOpacityConverter}" >
                    <Binding Path="FileAttributes" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                    <Binding Path="FileAttributesToShow" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>-->

        <Style.Triggers>
            <DataTrigger Binding="{Binding HasTransparency}">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ExplorerControlSizeThreeListViewItemContentTemplate" x:Shared="false" >
        <Grid Width="100">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="96" />
                <RowDefinition MaxHeight="32" />
            </Grid.RowDefinitions>
            <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsChecked="{Binding IsSelected}" />
            <Image Grid.Row="1" Source="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" VerticalAlignment="Bottom" Style="{StaticResource ExplorerControlImageStyle}" />
            <!--, Converter={local:ImageSourceConverter}}-->
            <TextBlock Grid.Row="2" TextWrapping="Wrap" TextAlignment="Center" Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type local:ExplorerControlListViewItemContent}" >
        <Setter Property="Template" Value="{StaticResource ExplorerControlSizeThreeListViewItemContentTemplate}" />
    </Style>

    <!--<DataTemplate x:Key="ExplorerControlSizeFourListViewItemContentTemplate" x:Shared="false">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="256" />
                <RowDefinition MaxHeight="32" />
            </Grid.RowDefinitions>
            <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            <Image Grid.Row="1" Source="{Binding ExtraLargeBitmapSource}" Style="{StaticResource ExplorerControlImageStyle}" />
            -->
    <!--, Converter={local:ImageSourceConverter}}-->
    <!--
            <TextBlock Grid.Row="2" TextWrapping="Wrap" TextAlignment="Center" Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ExplorerControlListListViewItemContentTemplate" x:Shared="false">
        <StackPanel Orientation="Horizontal" >
            <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControlListViewItem}}}" IsChecked="{Binding IsSelected}" />
            <Image Source="{Binding SmallBitmapSource}" Height="16" Width="16" Style="{StaticResource ExplorerControlImageStyle}" />
            -->
    <!--, Converter={local:ImageSourceConverter}}-->
    <!--
            <TextBlock Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="ExplorerControlTilesListViewItemContentTemplate" x:Shared="false">
        <StackPanel Orientation="Horizontal" >
            <CheckBox Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControlListViewItem}}}" IsChecked="{Binding IsSelected}" VerticalAlignment="Center" />
            <Image Source="{Binding MediumBitmapSource}" Height="48" Width="48" >
                <Image.Opacity>
                    <MultiBinding Converter="{StaticResource FileSystemInfoAttributesToOpacityConverter}" >
                        <Binding />
                        <Binding Path="FileSystemInfoProperties.Attributes" />
                        <Binding Path="ShowHiddenItems" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControl}}" />
                        <Binding Path="ShowSystemItems" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExplorerControl}}" />
                    </MultiBinding>
                </Image.Opacity>
            </Image>
            -->
    <!--, Converter={local:ImageSourceConverter}}-->
    <!--
            <StackPanel Margin="10,0,0,0">
                <TextBlock Style="{StaticResource ExplorerControlListViewItemTextBlockStyle}" />
                <controls:Label Padding="0" Content="{Binding ShellObject.Properties.System.ItemTypeText.ValueAsObject}" Foreground="Gray" />
                <controls:Label Padding="0" Content="{Binding ShellObject.Properties.System.Size.ValueAsObject}" Foreground="Gray" />
            </StackPanel>
        </StackPanel>
    </DataTemplate>-->
    <!--<Style TargetType="{x:Type local:CustomControl1}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomControl1}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>
